{
  "openapi": "3.0.3",
  "info": {
    "title": "AuroraAI service API",
    "description": "AuroraAI interfaces implemented by AuroraAI services.",
    "version": "0.0.1"
  },
  "paths": {
    "/{website}": {
      "get": {
        "operationId": "ReceiveSessionAttributes",
        "description": "When one AuroraAI service links to another AuroraAI service's website it can provide an auroraai_access_token as query parameter. The token can be used to fetch attributes used in service recommendation from core components.",
        "parameters": [
          {
            "name": "auroraai_access_token",
            "description": "Token that grants access to the session attributes",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "text/html": {}
            },
            "description": "Success"
          }
        },
        "tags": [
          "Service recommendation"
        ]
      }
    },
    "/{api}/auroraai/profile-management/v1/user_attributes": {
      "get": {
        "operationId": "GetUserAttributes",
        "description": "Get user attributes stored in the service. User id and attribute scopes are provided in the authorization JWT.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "example": {
                  "life_situation_meters": {
                    "family": [
                      8
                    ],
                    "finance": [
                      9
                    ],
                    "friends": [
                      3
                    ],
                    "health": [
                      2
                    ],
                    "housing": [
                      9
                    ],
                    "improvement_of_strengths": [
                      5
                    ],
                    "life_satisfaction": [
                      6
                    ],
                    "resilience": [
                      7
                    ],
                    "self_esteem": [
                      10
                    ],
                    "working_studying": [
                      1
                    ]
                  },
                  "municipality_code": "091",
                  "age": 20
                },
                "schema": {
                  "$ref": "#/components/schemas/UserAttributeValues"
                }
              }
            },
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Profile management"
        ]
      },
      "delete": {
        "operationId": "DeleteUserAttributes",
        "description": "Notify the service that it needs to delete all user's attributes. Core component calls this endpoint when user removes a service from their AuroraAI account. User id is provided in the authorization JWT.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Profile management"
        ]
      }
    },
    "/{api}/auroraai/profile-management/v1/token": {
      "post": {
        "operationId": "Token",
        "description": "Core component calls this endpoint to notify the service about changes in access tokens",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "access_token": "string",
                "token_type": "string",
                "expires_in": "number",
                "refresh_token": "string",
                "scope": "string",
                "id_token": "string"
              },
              "schema": {
                "$ref": "#/components/schemas/TokenInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Profile management"
        ]
      },
      "delete": {
        "operationId": "DeleteUserAttributes",
        "description": "Notify the service that it needs to delete all user's attributes. Core component calls this endpoint when user removes a service from their AuroraAI account. User id is provided in the authorization JWT.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "Profile management"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "UserAttributePointers": {
        "properties": {
          "user_id": {
            "description": "ID of the user whose the listed attributes are",
            "type": "string"
          },
          "user_attributes": {
            "description": "Attributes of the user",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "user_id",
          "user_attributes"
        ]
      },
      "UserAttributeValues": {
        "properties": {
          "age": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer"
          },
          "life_situation_meters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LifeSituationMeters"
              }
            ],
            "description": "Life Situation Meters as defined in 3X10D"
          },
          "municipality_code": {
            "description": "Municipality as a code defined in koodistot.suomi.fi",
            "type": "string"
          }
        },
        "type": "object",
        "example": {
          "life_situation_meters": {
            "family": [
              8
            ],
            "finance": [
              9
            ],
            "friends": [
              3
            ],
            "health": [
              2
            ],
            "housing": [
              9
            ],
            "improvement_of_strengths": [
              5
            ],
            "life_satisfaction": [
              6
            ],
            "resilience": [
              7
            ],
            "self_esteem": [
              10
            ],
            "working_studying": [
              1
            ]
          },
          "municipality_code": "091",
          "age": 20
        }
      },
      "LifeSituationMeters": {
        "properties": {
          "family": {
            "description": "Perhe",
            "items": {
              "maximum": 10,
              "minimum": 0,
              "type": "integer"
            },
            "type": "array"
          },
          "finance": {
            "description": "Raha-asiat",
            "items": {
              "maximum": 10,
              "minimum": 0,
              "type": "integer"
            },
            "type": "array"
          },
          "friends": {
            "description": "Yst\u00e4v\u00e4t",
            "items": {
              "maximum": 10,
              "minimum": 0,
              "type": "integer"
            },
            "type": "array"
          },
          "health": {
            "description": "Terveys",
            "items": {
              "maximum": 10,
              "minimum": 0,
              "type": "integer"
            },
            "type": "array"
          },
          "housing": {
            "description": "Asuminen",
            "items": {
              "maximum": 10,
              "minimum": 0,
              "type": "integer"
            },
            "type": "array"
          },
          "improvement_of_strengths": {
            "description": "Itsens\u00e4 kehitt\u00e4minen",
            "items": {
              "maximum": 10,
              "minimum": 0,
              "type": "integer"
            },
            "type": "array"
          },
          "life_satisfaction": {
            "description": "Tyytyv\u00e4isyys el\u00e4m\u00e4\u00e4n",
            "items": {
              "maximum": 10,
              "minimum": 0,
              "type": "integer"
            },
            "type": "array"
          },
          "resilience": {
            "description": "Vaikeuksien voittaminen",
            "items": {
              "maximum": 10,
              "minimum": 0,
              "type": "integer"
            },
            "type": "array"
          },
          "self_esteem": {
            "description": "Itsetunto",
            "items": {
              "maximum": 10,
              "minimum": 0,
              "type": "integer"
            },
            "type": "array"
          },
          "working_studying": {
            "description": "Opiskelu tai ty\u00f6",
            "items": {
              "maximum": 10,
              "minimum": 0,
              "type": "integer"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "JWT-payload": {
        "description": "Payload of the JWT that authorizes AuroraAI core-component to call the AuroraAI service endpoints. The public key to verify the JWT signature can be acquired from core-component endpoint /oauth/.well-known/jwks.json",
        "properties": {
          "iss": {
            "description": "Issuer. The base URL of AuroraAI core-component.",
            "type": "string"
          },
          "sub": {
            "description": "Subject. User-id that the operation is targeting.",
            "type": "string"
          },
          "aud": {
            "description": "Audience. The base URL of the AuroraAI service being called.",
            "type": "string"
          },
          "exp": {
            "description": "Expiration time as seconds from 1970-01-01T00:00:00Z UTC",
            "type": "int"
          },
          "scope": {
            "description": "User attributes that are in the scope of this request. Space separated.",
            "type": "string"
          }
        },
        "required": [
          "iss",
          "sub",
          "aud",
          "exp"
        ],
        "type": "object",
        "example": {
          "iss": "https://auroraai.suomi.fi",
          "sub": "b1b694c8-3b77-4277-8681-bfa42454b3da",
          "aud": "https://example.service.fi",
          "exp": 1633944132,
          "scope": "age municipality"
        }
      },
      "TokenInput": {
        "properties": {
          "access_token": {
            "type": "string"
          },
          "token_type": {
            "type": "string"
          },
          "expires_in": {
            "type": "number"
          },
          "refresh_token": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "id_token": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "api_key": {
        "in": "header",
        "name": "X-API-Key",
        "type": "apiKey"
      },
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [
    {
      "description": "Interface for AuroraAI service recommendation. Prefix **/{website}** refers to the service's website URL stored in PTV.",
      "name": "Service recommendation"
    },
    {
      "description": "Interface for AuroraAI profile management. Prefix **/{api}** refers to the URL path where the service implements the REST endpoints for AuroraAI core-component interfaces. Endpoints below are authorized only for the AuroraAI core components through a JWT that must be validated by the service. The JWT payload is documented in the 'Schemas' section at the bottom of this page.",
      "name": "Profile management"
    }
  ]
}